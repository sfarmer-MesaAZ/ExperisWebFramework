<!doctype html>
<html lang="en-us">
<head>
	<meta charset="utf-8" />
	<title>Experis Web Framework Documentation</title>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<link rel="stylesheet/less" href="../css/reset.less">
	<link rel="stylesheet/less" href="../css/framework.less">
	<link rel="stylesheet/less" href="documentation.less">
	<link rel="stylesheet" href="../js/google-code-prettify/prettify.css">

	<script src="../js/less-1.3.0.min.js"></script>

	<!--[if lt IE 9]>
	<link rel="stylesheet" href="../css/ie.css">
	<script src="//s3.amazonaws.com/nwapi/nwmatcher/nwmatcher-1.2.3-min.js"></script>
	<script src="../js/selectivizr-min.js"></script>
	<script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
</head>

<body>
<div id="wrapper">
	<header>
		<hgroup>
			<h1>EWF (Experis Web Framework)</h1>
			<h2>Usage and Reference Guide</h2>
		</hgroup>

		<nav>
			<ul>
				<li><a href="#about">What is EWF?</a></li>
				<li><a href="#setup">Setup</a></li>
				<li><a href="#layouts">Layouts</a></li>
				<li><a href="#scripts">Scripts</a></li>
				<li><a href="#notes">Notes</a></li>
			</ul>
		</nav>
	</header>

	<section id="about">
		<h1>What is Experis Web Framework?</h1>
		<p>EWF (pronounced &ldquo;oof&rdquo;) is a combination of Web technologies that acts as a framework for website development. It provides CSS layout techniques, common JavaScript functions, and third-party libraries that have become essential to modern Web designers. By creating a common starting point for Web projects, we can ensure design consistency, browser compatibility, and development efficiency.</p>
		<p>There are numerous CSS frameworks available already (960 Grid, Blueprint, Bootstrap, and Foundation, to name a few), so why create another? Well, we tried them, and each seems to suffer from at least one major problem. For example, 960 Grid doesn&rsquo;t provide any styles for flexible layouts (responsive design). Others use negative margins or weird positioning effects for elements to line up nicely. In almost all cases, additional HTML elements are required to do even the simplist of tasks &mdash; such as adding a background to a row of elements or including borders around cells in a grid. With EWF, we take the best ideas from those frameworks and implement them in a way that works with almost any design. We also provide common JavaScript features, like image sliders, and polyfills, such as support for HTML 5 video in older browsers.</p>
		<p>EWF is a work in progress and will continue to evolve as we use it in new projects and discover new and better methods of building quality websites.</p>
	</section> <!--/about -->

	<section id="setup">
		<h1>Setup</h1>
		<p>Getting started with EWF is easy. Download the files and start building.</p>
		<p>Okay, so there&rsquo;s a bit more to it than that; but that&rsquo;s why you&rsquo;re reading this documentation. Start your project by trying to use the columnar and grid layouts, as detailed below. When you&rsquo;re ready to start adding some client-side functionality, take a look at the <a href="#scripts">Scripts</a> section of this guide. We also have API documentation for all the JavaScript functions.</p>
		<p class="note">Important note: We use the LESS CSS framework to ease the creation and maintainability of CSS on your Web pages. By default, the LESS code is processed by JavaScript, but that isn&rsquo;t ideal for a production website. Make sure to implement LESS on the server side before going live. You can do this with <a href="http://www.dotlesscss.org/">dotLESS</a> (a .NET handler) or <a href="http://nodejs.org/">Node.js</a>.</p>

		<h2>Photoshop Guides</h2>
		<p>In the &ldquo;resources&rdquo; folder, you&rsquo;ll find a file called <strong>guides.psd</strong>. Feel free to use it as a starting point for your design by opening it in Photoshop or Fireworks (or any other software that supports the PSD format). Just be aware that this intended for a liquid/flex layout, so design accordingly.</p>
	</section> <!--/setup -->

	<section id="layouts">
		<h1>Layouts</h1>
		<p>In the early days of the Web, websites used tables for layout. This worked well for the most part, but tables are very rigid and can be difficult to update. Using them for layout also meant sacrificing the semantics of tables, which are intended only for tabular data.</p>
		<p>As support for CSS grew, designers began using floats to determine the structure of their pages. Floats are more flexible than tables, and they don&rsquo;t affect the semantics of the HTML, but they still aren&rsquo;t able to completely separate a Web page&rsquo;s markup from its design in most real-world situations. There&rsquo;s also the problem of clearing floats.</p>
		<p>There are many new ideas for layout, such as flexboxes and templates, but these do not have a decent degree of support in current browsers and some are still poorly defined. In the interim, Experis Web Framework aims to simplify the process of creating complex, responsive, column- and grid-based layouts. To do this, we&rsquo;ve created two basic layout structures that can be combined to accomplish almost any design requirement: the Columnar structure and the Grid structure.</p>

		<h2>Columnar Layout</h2>

		<section id="columnDemo" class="row">
			<div class="size-6">size-6</div>
			<div class="size-3">size-3</div>
			<div class="size-3">size-3</div>
		</section>

		<p>The columnar layout makes it simple to create rows of percentage-width columns by assigning each a container element a class of <code>row</code> and its direct children a class of <code>size-<em>n</em></code>, where <em>n</em> is a number from 1 to 12. Here&rsquo;s the HTML used in the example above.</p>
	
<pre class="prettyprint"><code>&lt;section class=&quot;row&quot;&gt;
	&lt;div class=&quot;size-6&quot;&gt;size-6&lt;/div&gt;
	&lt;div class=&quot;size-3&quot;&gt;size-3&lt;/div&gt;
	&lt;div class=&quot;size-3&quot;&gt;size-3&lt;/div&gt;
&lt;/section&gt;</code></pre>

		<p>The total size of the columns in a row must add up to twelve. For example, the columns above have sizes of 6, 3, and 3. Any combination will work &mdash; 4-6-2, 5-7, etc. &mdash; as long as it amounts to 12. Rows of columns can even be nested under existing columns &mdash; again adding up to a size of twelve per row.</p>
		<p class="note">Why twelve? It&rsquo;s a number that&rsquo;s divisible by many numbers (2, 3, 4, and 6). This makes it flexible so that it can align well with many other elements in your website layout.</p>

		<h2>Grid Layout</h2>

		<section id="gridDemo" class="four-column">
			<div>1</div>
			<div>2</div>
			<div>3</div>
			<div>4</div>
			<div>5</div>
			<div>6</div>
			<div>7</div>
			<div>8</div>
		</section>

		<p>Normally, to create a grid layout, like the one above, you either need to use a table or create your own CSS to float the elements with the correct width and margins. This grid layout relies on floats, but it&rsquo;s very flexible in that it allows you to define the number of columns through a CSS class. Unlike the column layout, all cells within a grid must be the same width. If you need a mixture of widths, you can combine the column and grid layouts, as discussed later.</p>
		<p>A grid has a class of <code><em>n</em>-column</code> where <em>n</em> is a word ranging from <em>one</em> to <em>twelve</em>. Each direct child element inside the grid is assumed to be a cell. Here is how we created the layout above.</p>

		<p>
<pre class="prettyprint"><code>&lt;section class=&quot;four-column&quot;&gt;
	&lt;div&gt;1&lt;/div&gt;
	&lt;div&gt;2&lt;/div&gt;
	&lt;div&gt;3&lt;/div&gt;
	&lt;div&gt;4&lt;/div&gt;
	&lt;div&gt;5&lt;/div&gt;
	&lt;div&gt;6&lt;/div&gt;
	&lt;div&gt;7&lt;/div&gt;
	&lt;div&gt;8&lt;/div&gt;
&lt;/section&gt;</code></pre>
		</p>

		<p>To change the above from a four-column grid to a two-column grid, all we have to do is change the class name. <span id="changeGridCols">Try it out</span>, and watch the demo grid above as it toggles between a class of <code>four-columns</code> and <code>two-columns</code>.</p>
		<p class="note">One more thing to point out: notice that we&rsquo;ve added padding and borders to the cells and columns in the demos. With most CSS frameworks, this creates big problems, because you can&rsquo;t mix pixel and percentage widths to arrive at 100%. To achieve this, we use the border-box CSS model for columns and grid cells, which is supported by all major browsers, even IE 8.</p>

		<h2>Grid Inside Column</h2>

		<section id="gridInColDemo" class="row">
			<div class="size-8 two-column">
				<div>1</div>
				<div>2</div>
				<div>3</div>
				<div>4</div>
			</div>

			<div class="size-4">size-4</div>
		</section>

		<p>By combining the columnar and grid layouts, we can create more complex layouts, like the one above. This layout could be used where the Web page has a sidebar on the right and a main content section consisting of thumbnail images. It&rsquo;s also possible to have columns within columns or grids within grids. This is the HTML for the above demo.</p>

		<p>
<pre class="prettyprint"><code>&lt;section class=&quot;row&quot;&gt;
	&lt;!-- Column 1 --&gt;
	&lt;div class=&quot;size-8 two-column&quot;&gt;
		&lt;div&gt;1&lt;/div&gt;
		&lt;div&gt;2&lt;/div&gt;
		&lt;div&gt;3&lt;/div&gt;
		&lt;div&gt;4&lt;/div&gt;
	&lt;/div&gt;

	&lt;!-- Column 2 --&gt;
	&lt;div class=&quot;size-4&quot;&gt;size-4&lt;/div&gt;
&lt;/section&gt;</code></pre>
		</p>

		<p class="note">Notice how we are able to use the same div as the column and as the grid container. This keeps your HTML lightweight by not requiring extra elements just for the purpose of attaching a class name &mdash; one of the main reasons we created Experis Web Framework.</p>
	</section> <!--/layouts -->

	<section id="scripts">
		<h1>Scripts</h1>
		<p>To make use of the scripts available in EWF, be sure to include the following just before the <code>&lt;/body&gt;</code> tag on your pages.</p>

<pre class="prettyprint"><code>&lt;script src=&quot;/js/experis.utils.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/js/experis.framework.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/js/global.js&quot;&gt;&lt;/script&gt;</code></pre>

		<p>Your site-wide scripts should be placed in <strong>global.js</strong>. We&rsquo;ve already filled out a few things for you. For a full reference on what functions are available, we have included an API reference guide at <a href="api-documentation.htm">documentation/api-documentation.htm</a>.</p>
	</section> <!--/scripts -->

	<section id="notes">
		<h1>Notes</h1>

		<ul>
			<li>Selectivizr and NWMatcher are used to provide CSS 3 selector support to IE 6-8. However, Selectivizr requires that all CSS be included by the <code>&lt;link&gt;</code> tag in order to be recognized. If you are using the client-side JavaScript version of LESS, the CSS will be inserted into a <code>&lt;style&gt;</code> tag and will not be parsed by Selectivizr.</li>
			<li>WebKit (Chrome and Safari) and Trident (IE) have a different interpretation than Mozilla (Firefox) concerning sub-pixel widths. In Firefox, columns or cells with widths that add up to 100% will take up the full available space. However, other browsers may leave a noticeable space at the end due to how they round fractional percentages. A JavaScript utility function has been developed to approximate Mozilla&rsquo;s implementation of sub-pixel rendering where percentages are concerned; however, it only works with the columnar layout at this time, not grid layouts.</li>
			<li>The latest version of NWMatcher (1.2.5) doesn&rsquo;t properly match nth-of-type selectors. So, we&rsquo;re using version 1.2.3.</li>
		</ul>
	</section> <!--/notes -->

	<script src="../js/experis.utils.js"></script>
	<script src="../js/experis.framework.js"></script>
	<script src="../js/global.js"></script>
	<script src="../js/google-code-prettify/prettify.js"></script>

	<script>
	(function () {
		// Start PrettyPrint
		$xu.addListener(window, 'load', function (e) { prettyPrint(); });

		// Demo functions
		$xu.includeScript($x.cdn.jquery, function () {
			$('#changeGridCols')
			.wrap('<a href="javascript:void(0);">')
			.click(function () {
				var gridDemo = $('#gridDemo');

				if (gridDemo.hasClass('four-column')) {
					gridDemo
						.removeClass('four-column')
						.addClass('two-column');
				} else {
					gridDemo
						.removeClass('two-column')
						.addClass('four-column');
				}

				window.location = '#gridDemo';
			});
		});
	})();
	</script>
</div>
</body>
</html>